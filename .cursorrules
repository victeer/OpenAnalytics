# 代码模式规范  
– **尽可能避免代码重复**：需主动检查代码库中是否已存在类似代码和功能  
– **谨慎修改范围**：仅修改明确要求变更的部分，或完全理解且确认与当前变更强相关的部分  
– **问题修复规范**：  
  - 优先彻底尝试现有实现方案  
  - 确需引入新模式/技术时，必须移除旧实现逻辑以避免重复  
– **保持代码库高度整洁有序**  
– **脚本文件管理**：  
  - 避免在文件中编写一次性脚本  
  - 严格限制文件长度（超过200-300行必须重构）  
– **环境文件保护**：  
  - 未经明确确认，禁止覆盖.env文件  

# 代码模式补充规范  
– **代码修改聚焦原则**：仅针对任务涉及的代码区域进行修改  
– **无关代码隔离原则**：禁止修改与当前任务无直接关联的代码  
– **核心功能测试规范**：为所有主要功能编写完整测试用例  
– **架构稳定性原则**：  
  - 功能实现已验证稳定后，若非明确要求，禁止大幅调整其设计模式或架构  
– **变更影响预判原则**：修改代码前必须评估可能受影响的关联方法与代码区域  


# 规则
- 每次开发前，先列出开发计划，跟用户确认，得到用户确认后，再进行开发。同时只开发用户要求的功能，不要自行添加任何其他功能。
- 每次修改代码前，先看目前是否已经有相关的逻辑，如果有，则直接复用，同时，要尽可能做到抽象，避免重复造轮子。
- 每次先到 docs/开发路线图.md 和 devlog.md 查看项目当前状态说明，了解项目所处阶段和开发重点。
- 当修改前端代码的时候，记得考虑是否对后端接口有影响。
  - 如果影响到了后端接口，记得对应修改，遵循测试驱动开发的原则
- 当修改后端代码的时候，记得考虑是否对前端接口有影响。
  - 如果影响到了前端接口，记得对应修改，遵循测试驱动开发的原则

### 自定义命令  
- 当用户输入 /docs ，根据项目现在代码实际的状态，更新文档:包括但不限于readme.md @开发路线图.md @开发指南.md 等等, 在修改是，不能乱写没有提及的内容, 不要自行杜撰内容。
- 当用户输入 /git , 为当前会话创建规范的 git提交，使用英文
- 当用户输入 /devlog, 自动生成开发总结，追加到项目根目录的 devlog.md文件(历史记录持续累积)。
  需要获取时间时，自动执行系统命令 date +%Y-%m-%d %H:%M:%S 获取当前时间。
  总结需包含以下要素:
  - 标题
  - 时间
  - 会话目标
  - 实现功能 
  - 关键技术决策
  - 问题解决方案
  - 采用技术栈
  - 涉及文件

- 当用户输入 /roadmap，如果当前会话修改或者完成了新功能，更新 docs/开发路线图.md 文件。此文件不要记录无关的开发过程，只关注项目各阶段里程碑事件。
